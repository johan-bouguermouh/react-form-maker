// HeaderStepperItem.component.tsx
import React, { forwardRef } from 'react';
import { useHeaderStepperItem } from './useHeaderStepperItem.hook';
import StepInfoDisplay from './StepInfoDisplay.component';
import {
  HeaderStepperItemInterface,
  HeaderStepperItemProps,
} from './HeaderStepperItem.interface';

/**
 * ### HeaderStepperItem Component
 *
 * The items represent the control points of the breadcrumb trail generated by navigation from the configuration passed in the form and the various ReactFormMakerSteps that make it up.
 *
 *
 *
 * ---
 *
 * #### Behavior
 *
 * ##### Horizontal Orientation
 *
 * - The items are clickable and allow the user to navigate to the corresponding step.
 * - The items display the name of the step if the space available on the screen allows it.
 * - Legend is a tooltip that displays the description of the step.
 * - The space available on the screen is calculated based on the width of the nav and the number of steps. Steps are hidden if the space is not enough.
 *
 * ##### Vertical Orientation
 *
 * - The legend is displayed on the right of the step name.
 * - The step item adaptes its height to the space available for readability of the legend.
 * - If the space is not enought, this item change to horizontal orientation.
 */
const HeaderStepperItem: HeaderStepperItemInterface = forwardRef<
  HTMLDivElement,
  HeaderStepperItemProps
>((props, ref) => {
  const {
    stepName,
    legend,
    isLastStep,
    localRef,
    styles,
    maxWidth,
    icon,
    ajustHeightProgressBar,
    positionTooltip,
    infoShouldBeDisplayed,
    goToStep,
    orientation,
    formIsLoading,
  } = useHeaderStepperItem({ ...props, ref });

  const { index } = props;

  return (
    <React.Fragment key={index}>
      <div
        className={`${styles.stepDirectionContainerClass} ${styles.cursorClass}`}
        onClick={(e) => {
          if (formIsLoading()) return;
          goToStep(index);
        }}
      >
        {icon()}
        {infoShouldBeDisplayed(maxWidth) && (
          <div
            className={styles.positionLabelClass}
            style={{
              width: orientation === 'horizontal' ? `${maxWidth}px` : '80%',
            }}
          >
            <StepInfoDisplay
              key={index}
              stepName={stepName}
              legend={legend}
              orientation={orientation}
              maxWidth={maxWidth}
              opacityClass={styles.opacityClass}
              positionTooltip={positionTooltip}
              ref={localRef}
            />
          </div>
        )}
      </div>
      {!isLastStep() && (
        <div
          className={`${styles.progressBarPositionClass} ${styles.barProgressClass}`}
          style={ajustHeightProgressBar()}
        ></div>
      )}
    </React.Fragment>
  );
});

HeaderStepperItem.displayName = 'HeaderStepperItem';

export default HeaderStepperItem;
